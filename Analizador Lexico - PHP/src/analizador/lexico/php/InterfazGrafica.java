
package analizador.lexico.php;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author bryan
 */
public class InterfazGrafica extends javax.swing.JFrame {
    
    private String ruta;
    private String nombre;

    public InterfazGrafica() {
        initComponents();
        ruta = "";
        nombre = "";
        
        //Componentes
        this.setLocationRelativeTo(null);
        btnAnalizar.setEnabled(false);
        btnCargarArchivo.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnCargarArchivo = new javax.swing.JButton();
        btnEscaner = new javax.swing.JButton();
        lblCargarArchivo = new javax.swing.JLabel();
        lblEscaner = new javax.swing.JLabel();
        btnAnalizar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAreaContenido = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtAreaErrores = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MiniPHP");
        setResizable(false);

        btnCargarArchivo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/compilador.png"))); // NOI18N
        btnCargarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarArchivoActionPerformed(evt);
            }
        });

        btnEscaner.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Upload.png"))); // NOI18N
        btnEscaner.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEscanerActionPerformed(evt);
            }
        });

        lblCargarArchivo.setText("Compilar Archivo Flex");

        lblEscaner.setText("Cargar Archivo PHP");

        btnAnalizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/analizar.png"))); // NOI18N
        btnAnalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnalizarActionPerformed(evt);
            }
        });

        jLabel1.setText("Analizar Archivo");

        txtAreaContenido.setBackground(new java.awt.Color(252, 252, 216));
        txtAreaContenido.setColumns(20);
        txtAreaContenido.setRows(5);
        jScrollPane1.setViewportView(txtAreaContenido);

        txtAreaErrores.setBackground(new java.awt.Color(204, 204, 255));
        txtAreaErrores.setColumns(20);
        txtAreaErrores.setRows(5);
        txtAreaErrores.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        jScrollPane2.setViewportView(txtAreaErrores);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Errores");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Archivo Correcto");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAnalizar, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(42, 42, 42)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblCargarArchivo)
                                    .addComponent(lblEscaner)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addComponent(btnEscaner, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addComponent(btnCargarArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 445, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(jLabel2)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane2))))
                .addGap(16, 16, 16))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(btnCargarArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblCargarArchivo)
                        .addGap(30, 30, 30)
                        .addComponent(btnEscaner, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(17, 17, 17)
                        .addComponent(lblEscaner)
                        .addGap(34, 34, 34)
                        .addComponent(btnAnalizar, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(18, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addGap(11, 11, 11)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(20, 20, 20))
        );

        lblCargarArchivo.getAccessibleContext().setAccessibleName("Compilar Archivo Flex");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCargarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarArchivoActionPerformed
        // TODO add your handling code here:
        
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode( JFileChooser.FILES_ONLY );
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivos Lexicos", "flex");
        chooser.setFileFilter(filter);
        int seleccion  = chooser.showOpenDialog(this);
        
        if(seleccion == JFileChooser.APPROVE_OPTION){
            
            if(chooser.getSelectedFile() != null)
            {
                ruta = chooser.getSelectedFile().getAbsolutePath();

                File archivo = new File(ruta);

                if(archivo.exists()){
                    
                    try{
                        //Compilar el archivo .Flex
                        jflex.Main.main(new String[]{ruta});
                        
                        JOptionPane.showMessageDialog(null,
                        "El archivo (.flex) ha compilado correctamente.",
                        "Aviso",JOptionPane.INFORMATION_MESSAGE);
                        
                        System.exit(0);
                    }
                    catch(Exception e)
                    {
                        JOptionPane.showMessageDialog(null,
                        "No se ha podido compilar el archivo (.flex).",
                        "ERROR",JOptionPane.ERROR_MESSAGE);
                    }                  
                }
                else{
                    JOptionPane.showMessageDialog(null,
                    "El archivo seleccionado no puede ser encontrado.",
                    "ERROR",JOptionPane.ERROR_MESSAGE);
                }
            } 
        }
        
               
    }//GEN-LAST:event_btnCargarArchivoActionPerformed

    private void btnEscanerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEscanerActionPerformed
        
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode( JFileChooser.FILES_ONLY );
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivos PHP", "php");
        chooser.setFileFilter(filter);
        int seleccion  = chooser.showOpenDialog(this);
        
        if(seleccion == JFileChooser.APPROVE_OPTION){
            
            if(chooser.getSelectedFile() != null)
            {
                ruta = chooser.getSelectedFile().getAbsolutePath();
                nombre = chooser.getSelectedFile().getName();
                nombre = nombre.replace(".php", "");

                File archivo = new File(ruta);

                if(archivo.exists()){
                    
                    try{              
                        JOptionPane.showMessageDialog(null,
                        "El archivo se ha cargado correctamente.",
                        "Información",JOptionPane.INFORMATION_MESSAGE);
                        
                        btnAnalizar.setEnabled(true);
                    }
                    catch(Exception e)
                    {
                        JOptionPane.showMessageDialog(null,
                        "No se ha podido cargar el archivo. \nError: " + e.getMessage(),
                        "ERROR",JOptionPane.ERROR_MESSAGE);
                    }                  
                }
                else{
                    JOptionPane.showMessageDialog(null,
                    "El archivo seleccionado no puede ser encontrado.",
                    "ERROR",JOptionPane.ERROR_MESSAGE);
                }
            } 
        }           
    }//GEN-LAST:event_btnEscanerActionPerformed

    private void btnAnalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnalizarActionPerformed
        
        ArrayList<Yytoken> errores = null;
        ArrayList<String> code = null;
        
        //Cargar el archivo de la ruta 
        BufferedReader reader = null;
        try {
            //Ruta del archivo especificado por el usuario
            reader = new BufferedReader(new FileReader(ruta));
            LexicalScannerPHP lexer = new LexicalScannerPHP(reader);
            
            Yytoken token = null;
            
            while(true){
                token = lexer.nextToken();
                
                if(token==null){
                    break;
                }else{
                    System.out.println(token.toString());
                }
            }
            
            errores = lexer.errores;
            code = lexer.tokens;
            reader.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(InterfazGrafica.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(InterfazGrafica.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        //Una vez finalizado el analisis verificamos si el archivo es correcto o  no
 
        String result = "";
        
        if(errores.size() > 0){
            //Hay errores
            
            JOptionPane.showMessageDialog(null,
                    "El archivo analizado contiene errores léxicos, el programa\n"
                    +"generará un archivo con los errores encontrados.\n\n"
                    +"Por favor eliga un nombre y una ruta en la cual desee\n"
                    +"almacenar dicho archivo",
                    "Aviso",JOptionPane.INFORMATION_MESSAGE);
            
            for(int i = 0; i < errores.size(); i++){
                
                if(i == errores.size() - 1){
                    result += "ERROR No." + Integer.toString(i+1) + ": " + errores.get(i).toString();
                }else{
                    result += "ERROR No." + Integer.toString(i+1) + ": " + errores.get(i).toString() + "\n";
                }          
            }
            
            //Crear el archivo de salida
            File file = new File("Errores-"+nombre+".out");
            
            JFileChooser chooser = new JFileChooser();
            FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivo de errores", "out");
            chooser.setFileFilter(filter);     
            chooser.setSelectedFile(file);
  
            int selection  = chooser.showSaveDialog(this);

            if(selection == JFileChooser.APPROVE_OPTION)
            {
                try {
                    
                    String name = chooser.getSelectedFile().getAbsolutePath();
                   
                    if(!name.contains(".out")){
                        name = name + ".out";
                    }
                                 
                    file = new File(name);
                    FileWriter writer = null;
                    BufferedWriter bw = null;
                    
                    if(file.exists()){
                        file.delete();
                        writer = new FileWriter(file);
                        bw = new BufferedWriter(writer);
                        bw.write(result);
                        bw.close();
                    }else{
                        writer = new FileWriter(file);
                        bw = new BufferedWriter(writer);
                        bw.write(result);
                        bw.close();                     
                    }
                    
                    txtAreaErrores.setText(null);
                    txtAreaErrores.setText(result);
                    txtAreaErrores.setCaretPosition(0);
                    txtAreaContenido.setText(null);
                    
                    JOptionPane.showMessageDialog(null,
                    "El archivo se ha guardado correctamente.",
                    "Información",JOptionPane.INFORMATION_MESSAGE);
                                       
                } catch (IOException ex) {
                    Logger.getLogger(InterfazGrafica.class.getName()).log(Level.SEVERE, null, ex);
                }
            }  
        }
        else{
            //NO hay errores
            
            JOptionPane.showMessageDialog(null,
                    "El archivo ingresado pertenece al lenguaje PHP.\n\n"
                    +"Por favor eliga un nombre y una ruta en la cual desee\n"
                    +"almacenar el archivo de salida.",
                    "Información",JOptionPane.INFORMATION_MESSAGE);
                
            for(int i = 0; i < code.size(); i++){
                result += code.get(i);
            }
            
            //Crear el archivo de salida
            File file = new File(nombre + ".out");
  
            JFileChooser chooser = new JFileChooser();
            FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivo de salida", "out");
            chooser.setFileFilter(filter);     
            chooser.setSelectedFile(file);
  
            int selection  = chooser.showSaveDialog(this);

            if(selection == JFileChooser.APPROVE_OPTION)
            {
                try {
                    String name = chooser.getSelectedFile().getAbsolutePath();
                   
                    if(!name.contains(".out")){
                        name = name + ".out";
                    }
                    
                    file = new File(name);
                    
                    
                    FileWriter writer = null;
                    BufferedWriter bw = null;
                    
                    if(file.exists()){
                        file.delete();
                        writer = new FileWriter(file);
                        bw = new BufferedWriter(writer);
                        bw.write(result);
                        bw.close();
                    }else{
                        writer = new FileWriter(file);
                        bw = new BufferedWriter(writer);
                        bw.write(result);
                        bw.close();                     
                    }
                    
                    txtAreaContenido.setText(null);
                    txtAreaContenido.setText(result);
                    txtAreaContenido.setCaretPosition(0);
                    txtAreaErrores.setText(null);
                    
                    JOptionPane.showMessageDialog(null,
                    "El archivo se ha guardado correctamente.",
                    "Información",JOptionPane.INFORMATION_MESSAGE);
                                       
                } catch (IOException ex) {
                    Logger.getLogger(InterfazGrafica.class.getName()).log(Level.SEVERE, null, ex);
                }
            }      
        }
        
        btnAnalizar.setEnabled(false);
    }//GEN-LAST:event_btnAnalizarActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfazGrafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfazGrafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfazGrafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfazGrafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterfazGrafica().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnalizar;
    private javax.swing.JButton btnCargarArchivo;
    private javax.swing.JButton btnEscaner;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblCargarArchivo;
    private javax.swing.JLabel lblEscaner;
    private javax.swing.JTextArea txtAreaContenido;
    private javax.swing.JTextArea txtAreaErrores;
    // End of variables declaration//GEN-END:variables
}
